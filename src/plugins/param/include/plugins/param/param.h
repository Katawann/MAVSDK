// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/param/param.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "plugin_base.h"

namespace mavsdk {

class System;
class ParamImpl;

/**
 * @brief Provide raw access to get and set parameters.
 */
class Param : public PluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a specific System.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto param = std::make_shared<Param>(system);
     *     ```
     *
     * @param system The specific system associated with this plugin.
     */
    explicit Param(System& system);

    /**
     * @brief Destructor (internal use only).
     */
    ~Param();

    /**
     * @brief Possible results returned for param requests.
     */
    enum class Result {
        Unknown, /**< @brief Unknown error. */
        Success, /**< @brief Request succeeded. */
        Timeout, /**< @brief Request timed out. */
        ConnectionError, /**< @brief Connection error. */
        WrongType, /**< @brief Wrong type. */
        ParamNameTooLong, /**< @brief Parameter name too long (> 16). */
    };

    /**
     * @brief Stream operator to print information about a `Param::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, Param::Result const& result);

    /**
     * @brief Callback type for asynchronous Param calls.
     */
    typedef std::function<void(Result)> result_callback_t;

    /**
     * @brief Synchronous wrapper for get_param_int_async().
     *
     * @return Result of request.
     */
    std::pair<Result, int32_t> get_param_int(std::string name) const;

    /**
     * @brief Synchronous wrapper for set_param_int_async().
     *
     * @return Result of request.
     */
    Result set_param_int(std::string name, int32_t value) const;

    /**
     * @brief Synchronous wrapper for get_param_float_async().
     *
     * @return Result of request.
     */
    std::pair<Result, float> get_param_float(std::string name) const;

    /**
     * @brief Synchronous wrapper for set_param_float_async().
     *
     * @return Result of request.
     */
    Result set_param_float(std::string name, float value) const;

    /**
     * @brief Returns a human-readable English string for a Result.
     *
     * @param result The enum value for which a human readable string is required.
     * @return Human readable string for the Result.
     */
    static const char* result_str(Result result);

    /**
     * @brief Copy constructor (object is not copyable).
     */
    Param(const Param&) = delete;

    /**
     * @brief Equality operator (object is not copyable).
     */
    const Param& operator=(const Param&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<ParamImpl> _impl;
};

} // namespace mavsdk